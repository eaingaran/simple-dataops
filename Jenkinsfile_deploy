pipeline {
    environment {
        isDeploymentSuccess = ''   
    }
    agent any
    tools {
      maven 'maven'
      jdk 'jdk1.8.0'
    }
    stages {
        stage('DryRun') {
            steps {
                echo 'Testing the scrips on a temporary database...'
                sh 'mvn liquibase:dropAll -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.210.53.126:9000/testdatabase -Ddb.username=test -Ddb.password=password'
                sh 'mvn liquibase:update -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.210.53.126:9000/testdatabase -Ddb.username=test -Ddb.password=password'
                sh 'mvn liquibase:rollback -Dliquibase.rollbackCount=10000000 -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.210.53.126:9000/testdatabase -Ddb.username=test -Ddb.password=password'
                sh 'mvn liquibase:update -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.210.53.126:9000/testdatabase -Ddb.username=test -Ddb.password=password'
            }
        }
        stage('CreateSQL') {
            steps {
                echo 'Creating update SQL from scripts..'
                sh 'mvn clean liquibase:updateSQL -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.210.53.126:9000/proddatabase -Ddb.username=prod -Ddb.password=password'
                sh 'mkdir build && cp target/liquibase/migrate.sql build/update.sql'
            }
        }
        stage('RollbackSQL') {
            steps {
                echo 'Creating rollback SQL from scripts..'
                sh 'mvn clean liquibase:futureRollbackSQL -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.210.53.126:9000/proddatabase -Ddb.username=prod -Ddb.password=password'
                sh 'cp target/liquibase/migrate.sql build/rollback.sql'
            }
        }
        stage('ArchiveCreation') {
            steps {
                echo 'Creating a tar.gz....'
                sh 'tar -czvf sample-devops-0.0.1.${BUILD_ID}.tar.gz build/'
            }
        }
        stage('ArchiveUpload') {
            steps {
                echo 'Deploying tar file to artifactory....'
                sh 'curl -uadmin:AP3k8uCck9Xxw1GG3i3yz2rq4Kz -T sample-devops-0.0.1.${BUILD_ID}.tar.gz "http://34.210.53.126:8081/artifactory/libs-snapshot/xyz/aingaran/dataops/sample-devops-0.0.1.${BUILD_ID}.tar.gz"'
                /*script {
                    try {
                        sh 'mvn deploy:deploy-file -DpomFile=pom.xml \
                              -Dfile=sample-devops-0.0.1.${BUILD_ID}.tar.gz \
                              -DrepositoryId=central \
                              -Durl=http://34.210.53.126:8081/artifactory/libs-snapshot/ \
                              -Dpackaging=tar.gz'
                    } catch(Exception e)    {
                        echo 'couldnt upload via maven deploy'
                    }
                }*/
            }
        }
        stage('DeploySQL') {
            steps {
                echo 'Deploying....'
                sh 'bash ./tools/setup.sh'
                script {
                  isDeploymentSuccess = sh(script: 'python3 tools/execute_sql.py 34.210.53.126 9000 prod password proddatabase build/update.sql', returnStdout: true)
                }
                echo 'deployment success? ' 
                echo isDeploymentSuccess
            }
        }
        stage('DeployRollbackSQL') {
            when {
                expression { isDeploymentSuccess == 'Failed' }
            }
            steps{
                echo 'Deploying Rollback....'
                script {
                    try {
                        sh 'python3 tools/rollback_sql.py 34.210.53.126 9000 prod password proddatabase build/rollback.sql'
                    } catch(Exception e)    {
                        echo 'rollback completed...'
                    }
                }
            }
        }
        stage('TestDatabase') {
            steps {
                echo 'Coming Soon....'
            }
        }
        stage('PrintLog')   {
            steps   {
                sh 'cat execution.log ||:'
            }
        }
        stage('CheckDepoymentForFailure') {
            when {
                expression { isDeploymentSuccess == 'Failed' }
            }
            steps {
                echo 'SQL Failed to Deploy. SQL rolled back and application not deployed... '
                sh 'exit 1'
            }
        }
    }
}
